[{"C:\\Users\\y_and\\my-app\\Eval-Modulo-2\\src\\index.js":"1","C:\\Users\\y_and\\my-app\\Eval-Modulo-2\\src\\App.js":"2","C:\\Users\\y_and\\my-app\\Eval-Modulo-2\\src\\components\\Todo.js":"3","C:\\Users\\y_and\\my-app\\Eval-Modulo-2\\src\\components\\Form.js":"4","C:\\Users\\y_and\\my-app\\Eval-Modulo-2\\src\\components\\FilterButton.js":"5"},{"size":420,"mtime":1682608087567,"results":"6","hashOfConfig":"7"},{"size":2434,"mtime":1683076955341,"results":"8","hashOfConfig":"7"},{"size":1283,"mtime":1683075091300,"results":"9","hashOfConfig":"7"},{"size":852,"mtime":1682606180909,"results":"10","hashOfConfig":"7"},{"size":352,"mtime":1682609041256,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"v7gzz0",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\y_and\\my-app\\Eval-Modulo-2\\src\\index.js",[],[],"C:\\Users\\y_and\\my-app\\Eval-Modulo-2\\src\\App.js",["30"],[],"import React, { useState, useRef, useEffect } from \"react\";\r\nimport Form from \"./components/Form\";\r\nimport FilterButton from \"./components/FilterButton\";\r\nimport Todo from \"./components/Todo\";\r\nimport { nanoid } from \"nanoid\";\r\n\r\nfunction usePrevious(value) {\r\n  const ref = useRef();\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  });\r\n  return ref.current;\r\n}\r\n\r\nconst FILTER_MAP = {\r\n  All: () => true,\r\n  Active: (task) => !task.completed,\r\n  Completed: (task) => task.completed,\r\n};\r\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\r\nfunction App(props) {\r\n  const [tasks, setTasks] = useState(props.tasks);\r\n  const [, setFilter] = useState(\"All\");\r\n\r\n \r\n\r\n  function deleteTask(id) {\r\n    const remainingTasks = tasks.filter((task) => id !== task.id);\r\n    setTasks(remainingTasks);\r\n  }\r\n\r\n  /*function editTask(id, newName) {\r\n    const editedTaskList = tasks.map((task) => {\r\n\r\n      if (id === task.id) {\r\n        //\r\n        return { ...task, name: newName };\r\n      }\r\n      return task;\r\n    });\r\n    setTasks(editedTaskList);\r\n  }*/\r\n //.filter(FILTER_MAP[filter])\r\n  const taskList = tasks.map((task) => (\r\n      <Todo\r\n        id={task.id}\r\n        name={task.name}\r\n        key={task.id}\r\n        //toggleTaskCompleted={toggleTaskCompleted}\r\n        deleteTask={deleteTask}\r\n        //editTask={editTask}    \r\n      />\r\n    ));\r\n\r\n  const filterList = FILTER_NAMES.map((name) => (\r\n    <FilterButton\r\n         />\r\n  ));\r\n\r\n  function addTask(name) {\r\n    const newTask = { id: \"todo-\" + nanoid(), name: name, completed: false };\r\n    setTasks([...tasks, newTask]);\r\n  }\r\n\r\n  const tasksNoun = taskList.length !== 1 ? \"Tareas Ingresadas\" : \"tareas\";\r\n  const headingText = `${taskList.length} ${tasksNoun} `;\r\n\r\n  const listHeadingRef = useRef(null);\r\n  const prevTaskLength = usePrevious(tasks.length);\r\n\r\n  useEffect(() => {\r\n    if (tasks.length - prevTaskLength === -1) {\r\n      listHeadingRef.current.focus();\r\n    }\r\n  }, [tasks.length, prevTaskLength]);\r\n\r\n  return (\r\n    <div className=\"todoapp stack-large\">\r\n      <Form addTask={addTask} />\r\n      <div className=\"filters btn-group stack-exception\">{filterList}</div>\r\n      <h2 id=\"list-heading\" tabIndex=\"-1\" ref={listHeadingRef}>\r\n        {headingText}\r\n      </h2>\r\n      <ul\r\n        className=\"todo-list stack-large stack-exception\"\r\n        aria-labelledby=\"list-heading\">\r\n        {taskList}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","C:\\Users\\y_and\\my-app\\Eval-Modulo-2\\src\\components\\Todo.js",["31","32","33"],[],"import React, { useEffect, useRef, useState } from \"react\";\r\n\r\n\r\nfunction usePrevious(value) {\r\n  const ref = useRef();\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  });\r\n  return ref.current;\r\n}\r\n\r\nexport default function Todo(props) {\r\n  const [isEditing, setEditing] = useState(false);\r\n  const [newName, setNewName] = useState('');\r\n\r\n  const editFieldRef = useRef(null);\r\n  const editButtonRef = useRef(null);\r\n\r\n  const wasEditing = usePrevious(isEditing);\r\n\r\n\r\n\r\n  const viewTemplate = (\r\n    <div className=\"stack-small\">\r\n      <div>\r\n          <label className=\"todo-label\" htmlFor={props.id}>\r\n            {props.name}\r\n          </label>\r\n        </div>\r\n        <div className=\"btn-group\">\r\n        \r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn__danger\"\r\n            onClick={() => props.deleteTask(props.id)}\r\n          >\r\n            Eliminar <span className=\"visually-hidden\">{props.name}</span>\r\n          </button>\r\n        </div>\r\n    </div>\r\n  );\r\n\r\n\r\n  useEffect(() => {\r\n    if (!wasEditing && isEditing) {\r\n      editFieldRef.current.focus();\r\n    }\r\n    if (wasEditing && !isEditing) {\r\n      editButtonRef.current.focus();\r\n    }\r\n  }, [wasEditing, isEditing]);\r\n\r\n\r\n  return <li className=\"todo\">{ viewTemplate}</li>;\r\n}",[],"C:\\Users\\y_and\\my-app\\Eval-Modulo-2\\src\\components\\Form.js",[],[],"C:\\Users\\y_and\\my-app\\Eval-Modulo-2\\src\\components\\FilterButton.js",[],[],{"ruleId":"34","severity":1,"message":"35","line":23,"column":12,"nodeType":"36","messageId":"37","endLine":23,"endColumn":21},{"ruleId":"34","severity":1,"message":"38","line":13,"column":21,"nodeType":"36","messageId":"37","endLine":13,"endColumn":31},{"ruleId":"34","severity":1,"message":"39","line":14,"column":10,"nodeType":"36","messageId":"37","endLine":14,"endColumn":17},{"ruleId":"34","severity":1,"message":"40","line":14,"column":19,"nodeType":"36","messageId":"37","endLine":14,"endColumn":29},"no-unused-vars","'setFilter' is assigned a value but never used.","Identifier","unusedVar","'setEditing' is assigned a value but never used.","'newName' is assigned a value but never used.","'setNewName' is assigned a value but never used."]